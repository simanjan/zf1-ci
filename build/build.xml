<?xml version="1.0" encoding="UTF-8"?>
<project name="zf1-ci" default="build" basedir=".">

	<target name="build" depends="prepare,lint,zf,testing,loc,depend,cpd,code-sniffer,md,api,code-browser" />

	<target name="clean" description="Cleanup build workspace">
		<delete includeemptydirs="true">
			<fileset dir=".">
				<include name="**/*"/>
				<exclude name="application/**/*"/>
				<exclude name="build/**/*"/>
				<exclude name="library/**/*"/>
				<exclude name="public/**/*"/>
				<exclude name="tests/**/*"/>
			</fileset>
		</delete>
	</target>

	<target name="prepare" depends="clean" description="Prepare for build">
		<mkdir dir="artefacts/api"/>
		<mkdir dir="artefacts/coverage"/>
		<mkdir dir="artefacts/reports"/>
	</target>

	<target name="lint">
		<phplint level="verbose" deprecatedaserror="true" cachefile="test-lint-cachefile" haltonfailure="true">
			<fileset dir=".">
				<include name="application/**/*.php"/>
				<include name="public/**/*.php"/>
			</fileset>
		</phplint>
	</target>

	<target name="zf" description="Creating symlink to Zend Framework">
		<symlink target="/lib/ZendFramework-1.11.11/library/Zend" link="${project.basedir}/library/Zend"/>
	</target>

	<target name="testing" description="Run unit tests with PHPUnit">
		<!-- The CoverageSetupTask prepares a database which can be used to gather code coverage information for unit tests. -->
		<coverage-setup database="artefacts/coverage/coverage.db">
			<fileset dir=".">
				<include name="application/**/*.php"/>
				<include name="public/**/*.php"/>
			</fileset>
		</coverage-setup>

		<!-- This task runs testcases using the PHPUnit framework. It is a functional port of the Ant JUnit task. -->
		<phpunit bootstrap="tests/bootstrap.php" codecoverage="true" printsummary="true">
			<formatter type="xml" todir="artefacts/reports" outfile="junit.xml"/>
			<formatter type="clover" todir="artefacts/reports" outfile="clover.xml"/>
			<batchtest>
				<fileset dir="tests">
					<include name="**/*Test.php"/>
				</fileset>
			</batchtest>
		</phpunit>

		<!-- The CoverageReportTask formats a coverage database into a framed HTML report using XSLT. The report can optionally make use of the Generic Syntax Highlighting library, GeSHi (See GeSHi Homepage) library to mark up source code. The path to the library (if not in the default path) can be specified as an attribute. -->
		<coverage-report outfile="artefacts/coverage/coverage.db">
			<report toDir="artefacts/coverage" title="zf1-ci coverage report"/>
		</coverage-report>
	</target>

	<taskdef name="phploc" classname="phing.tasks.custom.PHPLocTask" />

	<target name="loc">
		<tstamp>
			<format property="check.date.time" pattern="%Y%m%d-%H%M%S" locale="en_US"/>
		</tstamp>
		<!--<phploc reportType="csv" reportName="${check.date.time}-report" reportDirectory="artefacts/reports/phploc" countTests="true">-->
		<phploc reportType="cli" reportName="phploc" reportDirectory="artefacts/reports" countTests="true">
			<fileset dir=".">
				<include name="application/**/*.php"/>
				<include name="public/**/*.php"/>
			</fileset>
		</phploc>
	</target>

	<!-- This task runs PHP_Depend, a software analyzer and metric tool for PHP Code -->
	<target name="depend">
		<phpdepend>
			<fileset dir=".">
				<include name="application/**/*.php"/>
				<include name="public/**/*.php"/>
			</fileset>
			<logger type="jdepend-xml" outfile="artefacts/reports/jdepend.xml"/>
			<logger type="jdepend-chart" outfile="artefacts/reports/dependencies.svg"/>
			<logger type="overview-pyramid" outfile="artefacts/reports/overview-pyramid.svg"/>
		</phpdepend>
	</target>

	<!-- This task runs phpcpd, a Copy/Paste Detector (CPD) for PHP Code -->
	<target name="cpd">
		<phpcpd minLines="3" minTokens="40">
			<fileset dir=".">
				<include name="application/**/*.php"/>
				<include name="public/**/*.php"/>
			</fileset>
			<formatter type="pmd" outfile="artefacts/reports/pmd-cpd.xml"/>
		</phpcpd>
	</target>

	<!-- This task runs PHP_CodeSniffer to detect violations of a defined set of coding standards -->
	<target name="code-sniffer">
		<phpcodesniffer standard="Zend" format="checkstyle">
			<fileset dir=".">
				<include name="application/**/*.php"/>
				<include name="public/**/*.php"/>
			</fileset>
			<!--<config name="zend_ca_path" value="/path/to/ZendStudio/bin/ZendCodeAnalyzer"/>-->
			<formatter type="default" usefile="false"/>
			<formatter type="checkstyle" outfile="artefacts/reports/checkstyle.xml"/>
		</phpcodesniffer>
	</target>

	<!-- This task runs phpmd, a Project Mess Detector (PMD) for PHP Code -->
	<target name="md">
		<!--<phpmd rulesets="codesize,design,unusedcode">-->
		<phpmd rulesets="build/phpmd.xml">
			<fileset dir=".">
				<include name="application/**/*.php"/>
				<include name="public/**/*.php"/>
			</fileset>
			<formatter type="xml" outfile="artefacts/reports/pmd.xml"/>
		</phpmd>
	</target>

	<!-- This task runs phpDocumentor 2 , PHP 5.3-compatible API documentation tool -->
	<target name="api">
		<mkdir dir="artefacts/api"/>
		<touch file="artefacts/api/index.html" />
		<!--<phpdoc2 title="API Documentation" destdir="artefacts/api" template="responsive">-->
			<!--<fileset dir=".">-->
				<!--<include name="application/**/*.php"/>-->
				<!--<include name="public/**/*.php"/>-->
			<!--</fileset>-->
		<!--</phpdoc2>-->
	</target>

	<!-- The phpcb build target for PHP_CodeBrowser -->
	<target name="code-browser" description="Aggregate tool output with PHP_CodeBrowser">
		<mkdir dir="artefacts/code-browser"/>
		<touch file="artefacts/code-browser/index.html" />
		<exec command="phpcb  --log artefacts/reports --source application --output artefacts/code-browser" logoutput="true" />
	</target>

</project>
