<?xml version="1.0" encoding="UTF-8"?>
<project name="zf1-ci" default="build" basedir=".">

	<!--
		Loading property file for current environment
	-->
	<if>
		<isset property="env" />
		<then>
			<property file="build.${env}.properties" />
		</then>
		<else>
			<property file="build.local.properties" />
		</else>
	</if>

	<!--
		Default Target
	-->
	<target name="build" depends="prepare,testing,inspection,docs,deploy" />


	<!--
		On-commit Target
	-->
	<target name="on-commit" depends="prepare,testing,deploy" />

	<!--
		Prepare workspace for build processing:
		- show environment properties
		- setting up file sets for targets
		- cleaning workspace
		- creating empty directories
		- including Zend Framework
	-->
	<target name="prepare" depends="show-env-properties,setup-filesets,clean,make-dirs,include-zf" description="Preparing workspace for build" />

	<target name="show-env-properties">
		<echo message="System architecture: ${host.arch}" />
		<echo message="Domain name:         ${host.domain}" />
		<echo message="File system:         ${host.fstype}" />
		<echo message="OS hostname:         ${host.name}" />
		<echo message="OS description:      ${host.os}" />
		<echo message="PHP version:         ${php.version}" />

		<echo message="Phing version:       ${phing.version}" />
		<echo message="Phing directory:     ${phing.home}" />

		<echo message="Project Build file:  ${phing.file}" />
		<echo message="Project name:        ${phing.project.name}" />
		<echo message="Project basedir:     ${project.basedir}" />
	</target>

	<target name="setup-filesets">

		<patternset id="all">
			<include name="application/**/*"/>
			<include name="build/**/*"/>
			<include name="library/**/*"/>
			<include name="public/**/*"/>
			<include name="tests/**/*"/>
			<exclude name="library/Phing/**/*"/>
			<!--<exclude name="library/Zend/**/*"/>-->
		</patternset>

		<patternset id="php-application">
			<include name="application/**/*.php"/>
			<include name="build/**/*.php"/>
			<include name="library/**/*.php"/>
			<include name="public/**/*.php"/>
			<exclude name="library/Phing/**/*"/>
			<!--<exclude name="library/Zend/**/*"/>-->
		</patternset>

		<patternset id="php-tests">
			<include name="tests/**/*Test.php"/>
		</patternset>

		<patternset id="js">
			<include name="public/**/*.js" />
		</patternset>

		<patternset id="css">
			<include name="public/**/*.css" />
		</patternset>

		<patternset id="phtml">
			<include name="application/**/*.phtml" />
		</patternset>

		<patternset id="other">
			<include name="**/.htaccess" />
			<include name="**/*.ini" />
		</patternset>

		<fileset id="src.all" dir=".">
			<patternset refid="all"/>
		</fileset>

		<fileset id="src.deploy" dir=".">
			<patternset refid="php-application"/>
			<patternset refid="phtml"/>
			<patternset refid="js" />
			<patternset refid="css" />
			<patternset refid="other" />
		</fileset>

		<fileset id="src.php.all" dir=".">
			<patternset refid="php-application"/>
			<patternset refid="php-tests"/>
		</fileset>

		<fileset id="src.php.application" dir=".">
			<patternset refid="php-application"/>
		</fileset>

		<fileset id="src.php.tests" dir=".">
			<patternset refid="php-tests"/>
		</fileset>

		<fileset id="src.js" dir=".">
			<patternset refid="js" />
		</fileset>

		<fileset id="src.css" dir=".">
			<patternset refid="css" />
		</fileset>

	</target>

	<target name="clean" description="Cleaning workspace">
		<delete includeemptydirs="true">
			<fileset dir=".">
				<include name="artefacts/**/*"/>
				<exclude name="artefacts/cache/**/*"/>
				<exclude name="artefacts/reports/phploc.csv"/>
			</fileset>
		</delete>
		<delete quiet="true">
			<fileset dir="${dir.deploy}">
				<include name="**/*"/>
			</fileset>
		</delete>
	</target>

	<target name="make-dirs" description="Creating directories for artefacts">
		<mkdir dir="artefacts"/>
		<mkdir dir="artefacts/cache"/>
		<mkdir dir="artefacts/deploy"/>
		<mkdir dir="artefacts/coverage"/>
		<mkdir dir="artefacts/reports"/>
	</target>

	<target name="include-zf" description="Including Zend Framework">
		<echo message="Including Zend Framework"/>
		<mkdir dir="library"/>
		<symlink target="${zend.path}" link="library/Zend"/>
	</target>

	<!--
		Automated testing:
		- setting up code coverage database
		- running automated tests
		- creating code coverage report
	-->
	<target name="testing" description="Running automated tests" depends="prepare,coverage-setup,phpunit,coverage-report">
		<fail if="errr" message="Unit tests failed" />
	</target>

	<target name="coverage-setup" description="Preparing database for gathering code coverage information for unit tests">
		<!-- The CoverageSetupTask . -->
		<coverage-setup database="artefacts/coverage/coverage.db">
			<fileset refid="src.php.application" />
		</coverage-setup>
	</target>

	<target name="phpunit" description="Running unit tests with PHPUnit">
		<phpunit bootstrap="tests/bootstrap.php" codecoverage="true" printsummary="true" failureproperty="errr">
			<formatter type="xml" todir="artefacts/reports" outfile="junit.xml"/>
			<formatter type="clover" todir="artefacts/reports" outfile="clover.xml"/>
			<batchtest>
				<fileset refid="src.php.tests" />
			</batchtest>
		</phpunit>
	</target>

	<target name="coverage-report" description="Generating coverage report from code coverage database">
		<!-- The report can optionally make use of the Generic Syntax Highlighting library, GeSHi (See GeSHi Homepage) library to mark up source code -->
		<coverage-report outfile="artefacts/coverage/coverage.db">
			<report toDir="artefacts/coverage" title="zf1-ci coverage report"/>
		</coverage-report>
	</target>

	<!--
		Automated inspection:
		- generating code statistics with phploc
		- analyzing code and gathering metrics with PHP_Depend
		- detecting copy/pasted code with PHP Copy/Paste Detection
		- detecting violations of a defined set of coding standards with PHP_CodeSniffer (checkstyle)
		- detecting messy code with Project Mess Detector (PMD) for PHP Code
	-->
	<target name="inspection" description="Making automated code inspection" depends="prepare,lint,php-loc,php-depend,php-cpd,php-code-sniffer,php-md"/>

	<!--
		Checking files for errors:
		- PHP (php -l)
		- Javascript (JSLint)
		- CSS (CSSLint)
	-->
	<target name="lint" description="Checking files for errors" depends="prepare,lint-php,lint-js,lint-css" />

	<target name="lint-php" description="Checking PHP files for errors">
		<phplint level="verbose" deprecatedaserror="true" cachefile="artefacts/cache/php-lint.cache" haltonfailure="true" description="Checking PHP files for errors">
			<fileset refid="src.php.all" />
		</phplint>
	</target>

	<target name="lint-js" description="Checking JavaScript files for errors using JSlint">
		<!--<jsllint cachefile="artefacts/cache/js-lint.cache" executable="/lib/jsl-0.3.0/src" description="Checking JavaScript files for errors">-->
		<!--<fileset refid="src.js" />-->
		<!--</jsllint>-->
	</target>

	<target name="lint-css" description="Checking CSS files for errors using CSSLint">
		<!--TODO-->
	</target>

	<!--
		Defining custom tasks
	-->
	<taskdef name="phploc" classname="${project.basedir}/library.Phing.PhpLocTask" />

	<target name="php-loc" description="Generating code statistics">
		<tstamp>
			<format property="check.date.time" pattern="%Y%m%d-%H%M%S" locale="en_US"/>
		</tstamp>
		<phploc reportType="csv" reportName="phploc" reportDirectory="artefacts/reports" countTests="true">
			<fileset refid="src.php.application" />
		</phploc>
	</target>

	<target name="php-depend" description="Analyzing code and gathering metrics">
		<phpdepend>
			<fileset refid="src.php.application" />
			<logger type="jdepend-xml" outfile="artefacts/reports/jdepend.xml"/>
			<logger type="jdepend-chart" outfile="artefacts/reports/dependencies.svg"/>
			<logger type="overview-pyramid" outfile="artefacts/reports/overview-pyramid.svg"/>
		</phpdepend>
	</target>

	<target name="php-cpd" description="Detecting copy/pasted code">
		<phpcpd minLines="2" minTokens="2">
			<fileset refid="src.php.all" />
			<formatter type="pmd" outfile="artefacts/reports/pmd-cpd.xml"/>
		</phpcpd>
	</target>

	<target name="php-code-sniffer" description="Detecting violations of a defined set of coding standards">
		<phpcodesniffer standard="Zend" format="checkstyle">
			<fileset refid="src.php.all" />
			<!--<config name="zend_ca_path" value="/path/to/ZendStudio/bin/ZendCodeAnalyzer"/>-->
			<formatter type="default" usefile="false"/>
			<formatter type="checkstyle" outfile="artefacts/reports/checkstyle.xml"/>
		</phpcodesniffer>
	</target>

	<target name="php-md" description="Detecting messy code">
		<!--<phpmd rulesets="codesize,design,unusedcode">-->
		<phpmd rulesets="build/phpmd.xml">
			<fileset refid="src.php.all" />
			<formatter type="xml" outfile="artefacts/reports/pmd.xml"/>
		</phpmd>
	</target>

	<!--
		Generating technical documentation:
		- API with phpDocumentor 2
		- Code Browser with phpcb
	-->
	<target name="docs" description="Generating documentation" depends="prepare,api,code-browser" />

	<target name="api" description="Run phpDocumentor 2, API documentation tool">
		<mkdir dir="artefacts/api"/>
		<touch file="artefacts/api/index.html" />
		<phpdoc2 title="API Documentation" destdir="artefacts/api" template="responsive">
			<fileset refid="src.php.application" />
		</phpdoc2>
	</target>

	<target name="code-browser" description="Aggregate tool output with PHP_CodeBrowser">
		<mkdir dir="artefacts/code-browser"/>
		<touch file="artefacts/code-browser/index.html" />
		<exec command="phpcb  --log artefacts/reports --source application --output artefacts/code-browser" logoutput="true" />
	</target>

	<!--
		Deploying application on the server:
		- creating symlink to Zend Framework files;
		- copying files.
	-->
	<target name="deploy" description="Deploying application on the server" depends="prepare">
		<if>
			<equals arg1="${env}" arg2="local" />

			<then>
				<copy todir="${dir.deploy}">
					<fileset refid="src.deploy"/>
				</copy>
				<echo message="Creating symlink to Zend Framework"/>
				<mkdir dir="${dir.deploy}/library"/>
				<symlink target="${zend.path}" link="${dir.deploy}/library/Zend"/>
			</then>

			<else>
				<echo message="Cleaning deploy dir, creating deploy and document dir"/>
				<ssh host="${ssh.host}" port="${ssh.port}" username="${ssh.username}" password="${ssh.password}"
				     command="rm -rf ${ssh.path.temp} &amp;&amp; mkdir ${ssh.path.temp} &amp;&amp; mkdir ${ssh.path.to}"/>

				<echo message="SCP application files to ${ssh.path.temp}"/>
				<scp host="${ssh.host}" port="${ssh.port}" username="${ssh.username}" password="${ssh.password}" todir="${ssh.path.temp}">
					<fileset refid="src.deploy" />
				</scp>

				<echo message="rm -rf ${ssh.path.stable} &amp;&amp; mv ${ssh.path.to} ${ssh.path.stable} &amp;&amp; mv ${ssh.path.temp} ${ssh.path.to} &amp;&amp;  mkdir -p ${ssh.path.to}/library &amp;&amp; ln -s ${ssh.path.zf} ${ssh.path.to}/library"/>
				<ssh host="${ssh.host}" port="${ssh.port}" username="${ssh.username}" password="${ssh.password}"
				     command="rm -rf ${ssh.path.stable} &amp;&amp; mv ${ssh.path.to} ${ssh.path.stable} &amp;&amp; mv ${ssh.path.temp} ${ssh.path.to} &amp;&amp; mkdir -p ${ssh.path.to}/library &amp;&amp; ln -s ${ssh.path.zf} ${ssh.path.to}/library"/>

				<echo message="DbDeploy"/>
				<dbdeploy url="mysql:host=${db.host};dbname=${db.name}" userid="${db.username}" password="${db.password}" dir="db/deltas" outputfile="artefacts/deploy.sql" undooutputfile="artefacts/undo.sql"/>
				<pdosqlexec url="mysql:host=${db.host};dbname=${db.name}" userid="${db.username}" password="${db.password}" src="artefacts/deploy.sql"/>

				<gittag repository="." name="stable" force="true"/>

				<gittag repository="." list="true" pattern="marked" />

			</else>
		</if>

	</target>

</project>
